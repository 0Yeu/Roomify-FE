{
    "Slice (Redux) Example": {
        "description": "ReduxListSlice",
		"scope": "typescript",
        "prefix": "rdSlice",
        "body": [
            "/* eslint-disable no-empty-pattern */",
            "import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';",
            "import Redux from '@utils/redux';",
            "import { REHYDRATE } from 'redux-persist';",
            "import { ${2:login}Api } from './api';",
            "",
            "/**",
            " * ---------------- CONSTANT & INITIAL_STATE ----------------",
            " */",
            "",
            "export const CONSTANT = {",
            "  NAME: '$1',",
            "  ${3:LOGIN}: '$2'",
            "};",
            "",
            "const INITIAL_STATE = {",
            "  ...Redux.createObjectInitialState(CONSTANT.$3),",
            "};",
            "",
            "/**",
            " * ----------------------- REDUX THUNK -----------------------",
            " */",
            "",
            "export const $2 = createAsyncThunk<any, any>(",
            "  `${CONSTANT.NAME}/$2`,",
            "  async (data, thunkAPI) => {",
            "    try {",
            "      const response = await $2Api(data);",
            "      return response;",
            "    } catch (error) {",
            "      return thunkAPI.rejectWithValue(error);",
            "    }",
            "  }",
            ");",
            "",
            "/**",
            " * -------------------------- SLICE --------------------------",
            " */",
            "",
            "const slice = createSlice({",
            "  name: CONSTANT.NAME,",
            "  initialState: INITIAL_STATE,",
            "  reducers: {",
            "",
            "  },",
            "  extraReducers: (builder) => {",
            "    Redux.createObjectReducer(builder, CONSTANT.$3, $2);",
            "    builder.addCase(REHYDRATE, (state, action: any) => {",
            "      if (action.payload[CONSTANT.NAME]) {",
            "        state = {",
            "          ...action.payload[CONSTANT.NAME],",
            "          ...Redux.resetTempField(CONSTANT.$3)",
            "        };",
            "      }",
            "    });",
            "  },",
            "});",
            "",
            "// eslint-disable-next-line no-empty-pattern",
            "export const {} = slice.actions;",
            "",
            "export default slice.reducer;",
            ""
        ],
    }
}